// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cs_app.Data;

#nullable disable

namespace cs_app.Migrations
{
    [DbContext(typeof(EducationContext))]
    [Migration("20220607111630_MyMigr")]
    partial class MyMigr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cs_app.Data.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int>("Doc")
                        .HasColumnType("integer")
                        .HasColumnName("doc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sec_name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("cs_app.Data.Models.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_name");

                    b.Property<string>("GuideName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guide_name");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_name");

                    b.Property<int>("Room")
                        .HasColumnType("integer")
                        .HasColumnName("room");

                    b.HasKey("Id")
                        .HasName("pk_hotels");

                    b.ToTable("hotels", (string)null);
                });

            modelBuilder.Entity("cs_app.Data.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Dest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dest");

                    b.Property<int>("Flight")
                        .HasColumnType("integer")
                        .HasColumnName("flight");

                    b.Property<int>("NumPass")
                        .HasColumnType("integer")
                        .HasColumnName("num_pass");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("CustomerHotel", b =>
                {
                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint")
                        .HasColumnName("customers_id");

                    b.Property<long>("HotelsId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotels_id");

                    b.HasKey("CustomersId", "HotelsId")
                        .HasName("pk_customer_hotel");

                    b.HasIndex("HotelsId")
                        .HasDatabaseName("ix_customer_hotel_hotels_id");

                    b.ToTable("customer_hotel", (string)null);
                });

            modelBuilder.Entity("CustomerTicket", b =>
                {
                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint")
                        .HasColumnName("customers_id");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("ticket_id");

                    b.HasKey("CustomersId", "TicketId")
                        .HasName("pk_customer_ticket");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_customer_ticket_ticket_id");

                    b.ToTable("customer_ticket", (string)null);
                });

            modelBuilder.Entity("HotelTicket", b =>
                {
                    b.Property<long>("HotelsId")
                        .HasColumnType("bigint")
                        .HasColumnName("hotels_id");

                    b.Property<long>("TicketsId")
                        .HasColumnType("bigint")
                        .HasColumnName("tickets_id");

                    b.HasKey("HotelsId", "TicketsId")
                        .HasName("pk_hotel_ticket");

                    b.HasIndex("TicketsId")
                        .HasDatabaseName("ix_hotel_ticket_tickets_id");

                    b.ToTable("hotel_ticket", (string)null);
                });

            modelBuilder.Entity("CustomerHotel", b =>
                {
                    b.HasOne("cs_app.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_hotel_customers_customers_id");

                    b.HasOne("cs_app.Data.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_hotel_hotels_hotels_id");
                });

            modelBuilder.Entity("CustomerTicket", b =>
                {
                    b.HasOne("cs_app.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_ticket_customers_customers_id");

                    b.HasOne("cs_app.Data.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_ticket_tickets_ticket_id");
                });

            modelBuilder.Entity("HotelTicket", b =>
                {
                    b.HasOne("cs_app.Data.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hotel_ticket_hotels_hotels_id");

                    b.HasOne("cs_app.Data.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hotel_ticket_tickets_tickets_id");
                });
#pragma warning restore 612, 618
        }
    }
}
